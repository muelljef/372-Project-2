#!/usr/bin/python
from socket import *
import signal
import sys
import os

'''
    main():
'''
def main():
    clientSocket, command, filename, fileTransferPort, serverHost = initiateContact()
    makeRequest(clientSocket, command, filename, fileTransferPort, serverHost)
    clientSocket.close()


'''
    initiateContact(): Initiates contact with the server using the given server host and server port #
'''
def initiateContact():
    try:
        clientSocket = socket(AF_INET, SOCK_STREAM)
    except:
        print 'Failed to connect to ftserver.'
        sys.exit(1)

    # get the command line params
    serverHost, serverPort, command, filename, fileTransferPort = getAndValidateArguments()

    serverIp = gethostbyname(serverHost)
    clientSocket.connect((serverIp, serverPort))

    return clientSocket, command, filename, fileTransferPort, serverHost


'''
    getPortNumber(): Gets the port number from the command line arguments and converts it to an integer
    success: returns int serverPort
    failure: prints error to screen and exits the program
'''
def getAndValidateArguments():
    usage = 'usage: ftclient hostname server_port_number [-g filename | -l] data_transfer_port'

    if len(sys.argv) != 5 and len(sys.argv) != 6:
        print usage
        sys.exit(1)

    try:
        serverHost = sys.argv[1]
        serverPort = int(sys.argv[2])
        command = sys.argv[3]
        if command == '-g':
            if len(sys.argv) != 6:
                print 'Invalid number of arguments for command: ' + command;
                print usage
                sys.exit(1)
            filename = sys.argv[4]
            # reference the following for checking if file exists
            # http://www.pfinn.net/python-check-if-file-exists.html
            if os.path.exists('./' + filename):
                print 'Filename already exists, exiting'
                sys.exit(1)
            fileTransferPort = int(sys.argv[5])
        elif command == '-l':
            filename = ''
            fileTransferPort = int(sys.argv[4])
        else:
            print 'Invalid command given: ' + command;
            print usage
            sys.exit(1)
    except ValueError:
        print 'A port number provided was not a valid integer'
        sys.exit(1)

    if serverPort < 1 or serverPort > 65535:
        print 'Invalid server port number ' + str(serverPort)
        sys.exit(1)

    if fileTransferPort < 1 or fileTransferPort > 65535:
        print 'Invalid file transfer port number ' + str(fileTransferPort) + '\n'
        sys.exit(1)

    return serverHost, serverPort, command, filename, fileTransferPort


'''
    makeRequest(): 
'''
def makeRequest(clientSocket, command, filename, fileTransferPort, serverHostname):
    # send the host name
    clientSocket.send(gethostname())
    msg = clientSocket.recv(1024)
    if msg != '1':
        printErrorMsg(msg, serverHostname)
        return

    # send the port number
    clientSocket.send(str(fileTransferPort))
    msg = clientSocket.recv(1024);
    if msg != '1':
        printErrorMsg(msg, serverHostname)
        return

    # send the command
    clientSocket.send(command)
    msg = clientSocket.recv(1024)
    if msg != '1':
        printErrorMsg(msg, serverHostname)
        return

    if command == '-g':
        clientSocket.send(filename)
        msg = clientSocket.recv(1024)
        if msg != '1':
            printErrorMsg(msg, serverHostname)
            return

    try:
        dataSocket = socket(AF_INET, SOCK_STREAM)
        # the following link provided the solution to make the socket available immediately after closing the program
        # http://stackoverflow.com/questions/27360218/how-to-close-socket-connection-on-ctrl-c-in-a-python-programme
        dataSocket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
        dataSocket.bind(('', fileTransferPort))
        dataSocket.listen(1)
    except:
        print 'Failed to bind the port' + str(fileTransferPort)
        return

    dataConnectionSocket, addr = dataSocket.accept()

    if command == '-l':
        print "Receiving directory structure from ftserver on " + serverHostname
        msg = dataConnectionSocket.recv(1024)
        print msg + '\n'

    if command == '-g':
        receiveFile(dataConnectionSocket, filename, serverHostname)

    dataConnectionSocket.close()
    dataSocket.close()


'''
    receiveFile(): 
'''
def receiveFile(dataConnectionSocket, filename, serverHostname):
    print "Receiving file " + filename + " from ftserver on " + serverHostname
    # referenced the following two links for python file IO
    # http://www.pfinn.net/python-check-if-file-exists.html
    # http://www.pythonforbeginners.com/files/reading-and-writing-files-in-python
    try:
        with open('./' + filename, 'w') as file:
            # referenced the following for processing all of file
            # https://stackoverflow.com/questions/8546870/why-does-this-socket-connection-only-allow-1-send-and-receive
            while True:
                data = dataConnectionSocket.recv(1024)
                if data == '':
                    break
                file.write(data)
        print "File transfer complete"
    except IOError as e:
        print 'Unable to open file'

'''
    printErrorMsg():
'''
def printErrorMsg(msg, serverHostname):
    print 'ftserver on ' + serverHostname + ' says ' + msg


if __name__ == "__main__":
    main()

